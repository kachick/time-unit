= time-unit

* http://github.com/kachick/time-unit

== DESCRIPTION:

* express the interval between two times
* pure ruby and small libraly

== FEATURES/PROBLEMS:

* into Japanese
* add methods and testcases

== SYNOPSIS:

  UNITa = Time::Unit.new 30
  puts UNITa #=> 30sec
  puts UNITa.to_s(true) #=> 30second
  puts UNITa.millisecond #=> 30000
  puts UNITa.second #=> 30
  puts UNITa.minute #=> 1/2
  puts UNITa.hour #=> 1/120

  UNITb = Time::Unit.new 3333333, :msec
  puts UNITb #=> 55min 33sec 333msec
  puts UNITb.to_s(true) #=> 55minute 33second 333millisecond
  puts UNITb.millisecond #=> 3333333
  puts UNITb.hour #=> 1111111/1200000

  puts UNITa + UNITb #=> 56min 3sec 333msec
  puts UNITb - UNITa #=> 55min 3sec 333msec

  UNITc = Time::Unit.new 900, :hour
  puts UNITc #=> 37day 12hour
  puts UNITc.minute #=> 54000

  p UNITa < UNITc #=> true
  p [UNITa, UNITb, UNITc].sort.map(&:to_s) #=> ["30sec", "55min 33sec 333msec", "37day 12hour"]

  p obj = Time::Unit.parse('55minute 33second 333millisecond') #=> 55min 33sec 333msec
  p obj2 = Time::Unit.parse('55min 33sec 333msec') #=> 55min 33sec 333msec
  p obj3 = Time::Unit.parse('55min 10sec 333msec') #=> 55min 10sec 333msec
  puts obj - obj2 #=> 0
  puts obj - obj3 #=> 23sec
  puts obj.day #=> 1111111/28800000

  p now + obj #=> (show increased)
  p now - obj #=> (show decreased)

== REQUIREMENTS:

* Ruby 1.9.2

== INSTALL:

* sudo gem install time-unit

== LICENSE:

(The MIT License)

Copyright (c) 2010 Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.